#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

declare PLUGIN_PATH="$PLUGIN_AVAILABLE_PATH/githook"
declare webhookId=""

createHook() {
	declare desc="Creates a new webhook and adds it to http server and github"
	declare cmd="githook:hook-create"

	# Moves the input down by one so $1 will be the parameters after $cmd
	[[ $1 == $cmd ]] && shift 1

	# The command format is $cmd $webhook $repositoryShort
	declare webhook=$1
	declare repositoryShort=$2

	# Make hook data operations available
	source "$PLUGIN_PATH/data-operations/hooks"

	# Check if the hook exist in local data
	if !(hookExist $webhook)
	then

		# Create the new hook with github
		if createGithubHook $webhook $repositoryShort
		then

			# Once successful, add it to local data
			addHook $webhook $webhookId $repositoryShort
			echo "Successfully added \"$webhook\" as a webhook"
		fi
	else
		echo "err: given hook already exist"
	fi
}

createGithubHook() {
	declare webhook=$1
	declare repositoryShort=$2
	declare ip=$(curl "ifconfig.me")

	# Makes a request to github for creating webhook
	# Running this assumes GITHUB_USERNAME and GITHUB_TOKEN
	# is available in the environment variables
	declare response=$(curl \
	-sS \
	-u "$GITHUB_USERNAME:$GITHUB_TOKEN" \
	-H "Accept: application/vnd.github.v3+json" \
	"https://api.github.com/repos/$repositoryShort/hooks" \
	-d '{"name": "web","config": {"url": "http://'$ip:9000'/'$webhook'", "insecure_ssl": "1"}}')

	# If request was successful, there will be a webhook id returned
	if $(echo $response | jq 'has("id")')
	then
		webhookId=$(echo $response | jq '.id')
		return 0
	else

		# When request fails, there is always a message field
		echo "github err: Type $(echo $response | jq '.message')" 

		# Sometimes there would be errors field aswell for certain
		# errors so we should log that aswell
		if $(echo $response | jq 'has("errors")')
		then 
			echo "github err: $(echo $response | jq '.errors[0].message')"
		fi
		return 1
	fi
}

createHook "$@"