#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

declare PLUGIN_PATH="$PLUGIN_AVAILABLE_PATH/githook"
declare webhookId=""

createHook() {
	declare desc="Creates a new webhook and adds it to http server and github"
	declare cmd="githook:hook-create"

	# Moves the input down by one so $1 will be the parameters after $cmd
	[[ "$1" == "$cmd" ]] && shift 1

	# The command format is $cmd $webhook $repository
	declare webhook=$1
	declare repository=$2

	source "$PLUGIN_PATH/data-operations/hooks"
	if canAddHook "$webhook"
	then
		if createGithubHook $webhook $repository
		then
			echo $webhookId
			addHook "$webhook"
			echo "Successfully added \"$webhook\" as a webhook"
		fi
	else
		echo "err: given hook already exist"
	fi
}

createGithubHook() {
	declare webhook=$1
	declare repository=$2
	declare ip=$(curl "ifconfig.me")

	declare response=$(curl \
	-sS \
	-u "$GITHUB_USERNAME:$GITHUB_TOKEN" \
	-H "Accept: application/vnd.github.v3+json" \
	"https://api.github.com/repos/$repository/hooks" \
	-d '{"name": "web","config": {"url": "http://'$ip:9000'/'$webhook'", "insecure_ssl": "1"}}')

	if $(echo "$response" | jq 'has("id")')
	then
		webhookId=$(echo "$response" | jq '.id')
		return 0
	else
		echo "err: Type $(echo "$response" | jq '.message')" 
		if $(echo "$response" | jq 'has("errors")')
		then 
			echo "err: $(echo "$response" | jq '.errors[0].message')"
		fi
		return 1
	fi

}

createHook "$@"